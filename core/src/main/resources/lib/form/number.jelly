<!--
The MIT License

Copyright (c) 2004-2011, Sun Microsystems, Inc., Kohsuke Kawaguchi, Yahoo! Inc., Andrew Bayer

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
-->

<?jelly escape-by-default='true'?>
<j:jelly xmlns:j="jelly:core" xmlns:st="jelly:stapler" xmlns:d="jelly:define" xmlns:f="/lib/form">
  <st:documentation>
    Generates an input field <code>&lt;input type="number" ... /></code> to be
    used inside &lt;f:entry/>

    <st:attribute name="field" type="java.lang.String">
      Used for databinding. TBD.
    </st:attribute>
    <st:attribute name="name" type="java.lang.String"> <![CDATA[
      This becomes @name of the <input> tag.
      If @field is specified, this value is inferred from it.
       ]]>
    </st:attribute>
    <st:attribute name="value"> <![CDATA[
      The initial value of the field. This becomes the @value of the <input> tag.
      If @field is specified, the current property from the "instance" object
      will be set as the initial value automatically,
      which is the recommended approach.
      ]]>
    </st:attribute>
    <st:attribute name="default">
      The default value of the text box, in case both @value is and 'instance[field]' is null.
    </st:attribute>
    <st:attribute name="min"> <![CDATA[
      The minimum of the @value. This becomes the @min of the <input> tag.
      This will work only if @clazz is 'number', 'number-required', 'non-negative-number-required',
        'positive-number', 'positive-number-required'.
      If specified, the @value should be greater than this value, or errors will be rendered under the text field.
      If this value contains non-digit characters, it will not work.
      If @max is specified and @max is less than this value, both @min and @max will not work.
      ]]>
    </st:attribute>
    <st:attribute name="max"> <![CDATA[
      The maximum of the @value. This becomes the @max of the <input> tag.
      This will work only if @clazz is 'number', 'number-required', 'non-negative-number-required',
        'positive-number', 'positive-number-required'.
      If specified, the @value should be less than this value, or errors will be rendered under the text field.
      If this value contains non-digit characters, it will not work.
      If @min is specified and @min is greater than this value, both @min and @max will not work.
       ]]>
    </st:attribute>
    <st:attribute name="step"> <![CDATA[
      The step size of the @value. The default is 1. This becomes the @step of the <input> tag.
      The step should be an integer.
      Otherwise the spinner of the input will change the field to non integer values.
      ]]>
    </st:attribute>
    <!-- Tomcat doesn't like us using the attribute called 'class' -->
    <st:attribute name="clazz">
      Additional CSS class(es) to add (such as client-side validation clazz="required",
      "number" or "positive-number"; these may be combined, as clazz="required number").
    </st:attribute>
    <st:attribute name="checkMessage">
      Override the default error message when client-side validation fails,
      as with clazz="required", etc.
    </st:attribute>
    <st:attribute name="checkUrl">
      If specified, the value entered in this input field will be checked (via AJAX)
      against this URL, and errors will be rendered under the text field.

      If @field is specified, this will be inferred automatically,
      which is the recommended approach.
    </st:attribute>
    <st:attribute name="checkMethod" use="optional" type="String">
      Specify 'get' (must be lowercase) to change the HTTP method used for the AJAX requests to @checkUrl from a POST to a GET.
      If any other value is specified then requests will use POST.
      The historical default was GET and 'post' had to be specified to change that, but this was changed in Jenkins 2.285.
    </st:attribute>
  </st:documentation>
  <f:prepareDatabinding />

  <!-- mostly pass-through all the attributes -->
  <!--
    Do not add 'number' class name by default.
    INPUT.number (defined in hudson-behavior.js) is a class for integers.
    On the other hand, HTML5 <input> permits floating-point numbers.
  -->
  <j:set var="name" value="${attrs.name ?: '_.'+attrs.field}"/>
  <j:set var="default" value="${attrs.default ?: ''}"/>
  <j:set var="value" value="${attrs.value ?: instance[attrs.field] ?: default}"/>

  <f:possibleReadOnlyField>
    <m:input xmlns:m="jelly:hudson.util.jelly.MorphTagLibrary"
           class="jenkins-input ${attrs.checkUrl!=null?'validated':''} ${attrs.clazz}"
           name="${name}"
           value="${value}"
           type="number"
           ATTRIBUTES="${attrs}" EXCEPT="field clazz" />
  </f:possibleReadOnlyField>
  <j:if test="${customizedFields != null and attrs.field != null and value != default}">
    <j:mute>${customizedFields.add(name)}</j:mute>
  </j:if>
</j:jelly>
